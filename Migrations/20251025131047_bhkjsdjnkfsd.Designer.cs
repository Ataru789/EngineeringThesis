// <auto-generated />
using System;
using EngineeringThesis.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EngineeringThesis.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251025131047_bhkjsdjnkfsd")]
    partial class bhkjsdjnkfsd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EngineeringThesis.Models.DevEmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasPrecision(6)
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("ToNormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.HasKey("Id");

                    b.HasIndex("ToNormalizedEmail");

                    b.ToTable("DevEmails");
                });

            modelBuilder.Entity("EngineeringThesis.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Iterations")
                        .HasColumnType("integer");

                    b.Property<string>("KdfAlgorithm")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Prf")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<byte[]>("SecurityAnswerHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SecurityAnswerSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("SecurityQuestion")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("TwoFactorSecret")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUsername")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Iterations_Positive", "\"Iterations\" > 0");

                            t.HasCheckConstraint("CK_User_KdfAlgorithm", "\"KdfAlgorithm\" = 'PBKDF2'");

                            t.HasCheckConstraint("CK_User_PasswordHash_Len", "octet_length(\"PasswordHash\") = 32");

                            t.HasCheckConstraint("CK_User_PasswordSalt_Len", "octet_length(\"PasswordSalt\") = 16");

                            t.HasCheckConstraint("CK_User_Prf", "\"Prf\" = 'HMACSHA256'");

                            t.HasCheckConstraint("CK_User_SecAnsHash_Len", "octet_length(\"SecurityAnswerHash\") = 32");

                            t.HasCheckConstraint("CK_User_SecAnsSalt_Len", "octet_length(\"SecurityAnswerSalt\") = 16");

                            t.HasCheckConstraint("CK_User_TotpSecret_Len", "octet_length(\"TwoFactorSecret\") = 20");
                        });
                });

            modelBuilder.Entity("EngineeringThesis.Models.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTokenType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ValueHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ValueHash")
                        .IsUnique();

                    b.HasIndex("UserId", "UserTokenType", "ExpiresAt");

                    b.ToTable("UserTokens", t =>
                        {
                            t.HasCheckConstraint("CK_UserToken_ValueHash_Len", "octet_length(\"ValueHash\") = 32");
                        });
                });

            modelBuilder.Entity("EngineeringThesis.Models.UserToken", b =>
                {
                    b.HasOne("EngineeringThesis.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EngineeringThesis.Models.User", b =>
                {
                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
