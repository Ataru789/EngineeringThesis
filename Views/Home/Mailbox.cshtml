@using System.Runtime.InteropServices
@using System.Text.RegularExpressions
@model List<EngineeringThesis.Models.DevEmailMessage>

@{
    ViewData["Title"] = "Mailbox (DEV)";
    var email = (string?)ViewBag.Email ?? "";

    var tzId = RuntimeInformation.IsOSPlatform(OSPlatform.Windows)
        ? "Central European Standard Time"
        : "Europe/Warsaw";
    var plTz = TimeZoneInfo.FindSystemTimeZoneById(tzId);

    
    var fwd = Context.Request.Headers["X-Forwarded-For"].FirstOrDefault();
    var clientIp = !string.IsNullOrWhiteSpace(fwd)
        ? fwd.Split(',')[0].Trim()
        : Context.Connection.RemoteIpAddress?.ToString() ?? "unknown";

    string RenderBody(EngineeringThesis.Models.DevEmailMessage m, TimeZoneInfo tz)
    {
        var code = Regex.Match(m.Body ?? "", @"<b>(\d+)</b>").Groups[1].Value;
        var expLocal = TimeZoneInfo.ConvertTime(m.ExpiresAt, tz);

        var isReset = (m.Subject ?? "").Contains("reset", StringComparison.OrdinalIgnoreCase);
        var line1 = isReset
            ? $"Kod resetu: <b>{(string.IsNullOrEmpty(code) ? "—" : code)}</b>"
            : $"Twój kod potwierdzenia to: <b>{(string.IsNullOrEmpty(code) ? "—" : code)}</b>";

        var line2 = $"Kod wygaśnie o {expLocal:HH:mm}.";

        var line3 = $"<span class=\"muted\">IP urządzenia: <span class=\"code\">{clientIp}</span></span>";

        return $"{line1}<br/>{line2}<br/>{line3}";
    }

    string PreviewText(string html)
    {
        var text = Regex.Replace(html ?? "", "<.*?>", string.Empty);
        return text.Length > 140 ? text.Substring(0, 140) + "…" : text;
    }
}

<style>
    .mailbox-wrap { display:flex; gap:16px; height: calc(100vh - 160px); }
    .mailbox-sidebar { width: 320px; border-right: 1px solid #e5e7eb; overflow:auto; }
    .mailbox-content { flex:1; overflow:auto; }
    .mail-item { padding:12px 16px; border-bottom:1px solid #f1f5f9; cursor:pointer; }
    .mail-item:hover { background:#f8fafc; }
    .subject { font-weight:600; }
    .snippet { color:#6b7280; font-size:0.95rem; margin-top:4px; }
    .topbar { display:flex; gap:8px; align-items:center; margin-bottom:12px; }
    .topbar input[type=email]{ flex:1; padding:10px 12px; border:1px solid #e5e7eb; border-radius:8px; }
    .topbar button{ padding:10px 14px; border:0; border-radius:8px; background:#1f2937; color:#fff; }
    .pill { font-size:12px; padding:2px 8px; border-radius:999px; border:1px solid #e5e7eb; margin-left:8px; }
    .muted { color:#6b7280; }
    .code { font-family: ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 1.15rem; }
</style>

<h2 class="muted">DEV Mailbox</h2>
<form method="get" class="topbar">
    <input type="email" name="email" value="@email" placeholder="Wpisz e-mail użytkownika..." required />
    <button type="submit">Otwórz skrzynkę</button>
    @if (!ViewData.ModelState.IsValid)
    {
        <span class="pill">@(ViewData.ModelState["Email"]?.Errors.FirstOrDefault()?.ErrorMessage)</span>
    }
</form>

@if (string.IsNullOrWhiteSpace(email))
{
    <p class="muted">Podaj e-mail aby wyświetlić wiadomości.</p>
}
else if (Model.Count == 0)
{
    <p>Brak wiadomości dla <b>@email</b>.</p>
}
else
{
<div class="mailbox-wrap">
    <aside class="mailbox-sidebar" id="list">
        @foreach (var m in Model)
        {
            var expired = m.ExpiresAt <= DateTimeOffset.UtcNow;
            var expLocal = TimeZoneInfo.ConvertTime(m.ExpiresAt, plTz);
            var createdLocal = TimeZoneInfo.ConvertTime(m.CreatedAt, plTz);
            var rendered = RenderBody(m, plTz);
            <div class="mail-item" data-id="@m.Id" onclick="selectMail(@m.Id)">
                <div class="subject">
                    @m.Subject
                    @if (expired)
                    {
                        <span class="pill">wygasło</span>
                    }
                    else
                    {
                        <span class="pill">do @expLocal.ToString("HH:mm")</span>
                    }
                </div>
                <div class="snippet">@PreviewText(rendered)</div>
                <div class="muted" style="margin-top:6px;">@createdLocal.ToString("yyyy-MM-dd HH:mm")</div>
            </div>
        }
    </aside>
    <main class="mailbox-content" id="content">
        <p class="muted" style="padding:16px;">Wybierz wiadomość z listy po lewej.</p>
    </main>
</div>
}

<script>
    const messages = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
        Model.Select(m => new {
            id = m.Id,
            subject = m.Subject,
            bodyHtml = RenderBody(m, plTz),
            created = TimeZoneInfo.ConvertTime(m.CreatedAt, plTz).ToString("yyyy-MM-dd HH:mm"),
            expires = TimeZoneInfo.ConvertTime(m.ExpiresAt, plTz).ToString("yyyy-MM-dd HH:mm")
        })
    ));

    function selectMail(id) {
        const m = messages.find(x => x.id === id);
        if (!m) return;
        const html = `
            <div style="padding:16px 20px;">
                <h3 style="margin:0 0 6px 0;">${m.subject ?? ""}</h3>
                <div class="muted" style="margin-bottom:14px;">Wysłano: ${m.created} &nbsp;|&nbsp; Wygasa: ${m.expires}</div>
                <div style="line-height:1.6">${m.bodyHtml ?? ""}</div>
            </div>`;
        document.getElementById('content').innerHTML = html;
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }
</script>
