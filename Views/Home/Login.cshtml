@model EngineeringThesis.Contracts.Auth.LoginRequest
@{
    ViewData["Title"] = "Logowanie";
}

<h2 class="mb-4">Logowanie</h2>

<div id="alertBox" class="alert d-none" role="alert"></div>

<form id="loginForm" novalidate>
    <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>

    <div class="mb-3">
        <label asp-for="Identifier" class="form-label">E-mail lub nazwa użytkownika</label>
        <input asp-for="Identifier" class="form-control" autocomplete="username" />
        <span asp-validation-for="Identifier" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Password" class="form-label">Hasło</label>
        <input asp-for="Password" class="form-control" autocomplete="current-password" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>

    <div id="twoFactorBlock" style="display:none;">
        <div class="mb-3">
            <label asp-for="TwoFactorCode" class="form-label">Kod TOTP (6 cyfr)</label>
            <input asp-for="TwoFactorCode"
                   id="TwoFactorCode"
                   class="form-control"
                   inputmode="numeric" pattern="[0-9]{6}" maxlength="6"
                   autocomplete="one-time-code" />
            <span asp-validation-for="TwoFactorCode" class="text-danger"></span>
        </div>
    </div>

    <button type="submit" id="loginBtn" class="btn btn-primary">
        <span class="spinner-border spinner-border-sm me-2 d-none" id="loginSpinner" aria-hidden="true"></span>
        Zaloguj
    </button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const form = document.getElementById('loginForm');
            const btn = document.getElementById('loginBtn');
            const spinner = document.getElementById('loginSpinner');
            const alertBox = document.getElementById('alertBox');
            const twoFactorBlock = document.getElementById('twoFactorBlock');

            function showAlert(msg, type) {
                alertBox.className = 'alert alert-' + type;
                alertBox.textContent = msg;
                alertBox.classList.remove('d-none');
            }
            function clearAlert() {
                alertBox.className = 'alert d-none';
                alertBox.textContent = '';
            }
            function setBusy(b) {
                btn.disabled = b;
                spinner.classList.toggle('d-none', !b);
            }
            function clearServerErrors() {
                const spans = form.querySelectorAll('span.field-validation-error, span.text-danger');
                spans.forEach(s => { if (!s.classList.contains('text-danger')) return; s.textContent = ''; });
                const summary = form.querySelector('[data-valmsg-summary="true"]');
                if (summary) summary.innerHTML = '';
            }
            function applyModelStateErrors(errors) {
                for (const [field, msgs] of Object.entries(errors)) {
                    const span = form.querySelector(`[data-valmsg-for="${field}"]`);
                    if (span) {
                        span.textContent = msgs.join(' ');
                        span.classList.add('field-validation-error');
                    }
                }
            }

            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                clearAlert();
                clearServerErrors();

                // jQuery unobtrusive validation (jak w rejestracji)
                if (typeof $ !== 'undefined' && $(form).valid && !$(form).valid()) {
                    return;
                }

                const payload = {
                    Identifier: document.getElementById('Identifier').value.trim(),
                    Password: document.getElementById('Password').value,
                    TwoFactorCode: twoFactorBlock.style.display !== 'none'
                        ? (document.getElementById('TwoFactorCode').value || null)
                        : null
                };

                setBusy(true);
                try {
                    const r = await fetch('/api/auth/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify(payload)
                    });

                    if (r.ok) { location.href = '/'; return; }

                    const data = await r.json().catch(() => ({}));
                    const msg = (data && (data.message || data.error || JSON.stringify(data))) || 'Błąd logowania.';

                    if (r.status === 400 && data?.errors) {
                        applyModelStateErrors(data.errors);
                        showAlert('Popraw zaznaczone pola.', 'warning');
                        return;
                    }

                    if (r.status === 401 && String(msg).toLowerCase().includes('wymagany kod 2fa')) {
                        twoFactorBlock.style.display = '';
                        showAlert('Włączone 2FA — podaj 6-cyfrowy kod i spróbuj ponownie.', 'info');
                        return;
                    }

                    if (r.status === 429) { // lockout
                        showAlert(msg, 'warning');
                        return;
                    }

                    showAlert(msg, 'danger');
                } catch {
                    showAlert('Błąd sieci. Spróbuj ponownie.', 'danger');
                } finally {
                    setBusy(false);
                }
            });
        })();
    </script>
}
